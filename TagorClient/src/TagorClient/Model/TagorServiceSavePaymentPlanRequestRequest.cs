/*
 * Tagor API
 *
 * Release date: 29/09/2022  ## REQUIREMENTS This version __requires__ Tagor >= 2.00.0000B0. Use [`Config/Info`](#operation/ConfigInfo) to get the active API version.  ## CHANGELOG - New [`Dossier/CreateAgenda`](#operation/DossierCreateAgenda) endpoint. - New return values in GetAgenda 'TJOB_Id, TJOBM_Id, TUSER_Id, Manueel and IsGeblokkeerd' - In CreateLine you can now add if the line is fixed with 'IsFixed' - In CreateLine you can now add a subarray with the intrests  ## INFO - Using the download button at the top you can import this collection of endpoints in **Postman** - In general all TQ(...)_Id fields are default fields which you can translate with the [`Code/GetDescription`](#operation/CodeGetDescription) endpoint. If you need an id to post to one of the endpoints you can use the [`Code/GetList`](#operation/CodeGetList) endpoint to get all possible values or [`Code/GetDescription`](#operation/CodeGetDescription) to get a value by code. These id's will be marked as `code id` in the documentation. - We chose to return all ids as string because these are 64bit integers which are too big for javascript to handle. - All italic text below the endpoint description is meant for people with access to Tagor. - The user needs an email address configured in Tagor for the services to work properly. - Pass the `Accept` header with `application/json` as value to have the server return errors in json format. - Most endpoints can be batched/paged by passing a `BATCH-SIZE` and `BATCH-NUMBER` record in `dsWebContext`.  # AUTHENTICATION Pass your token via an `Authorization` header like this: `Authorization: {bearer_format} {token}`.  ex: `Authorization: TGR IcoQbVw7wE...PPUPda61ET` <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2.00.0000B1
 * Contact: info@organi.be
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TagorClient.Client.OpenAPIDateConverter;

namespace TagorClient.Model
{
    /// <summary>
    /// TagorServiceSavePaymentPlanRequestRequest
    /// </summary>
    [DataContract(Name = "TagorServiceSavePaymentPlan_request_request")]
    public partial class TagorServiceSavePaymentPlanRequestRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TagorServiceSavePaymentPlanRequestRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TagorServiceSavePaymentPlanRequestRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TagorServiceSavePaymentPlanRequestRequest" /> class.
        /// </summary>
        /// <param name="tDOSId">Id of the file you want to create a payment plan on. This field is not required when using the &#x60;Code&#x60; authentication. In this case this endpoint will always only use the file linked to the code. (required).</param>
        /// <param name="tPARId">The party to link with the payment plan.</param>
        /// <param name="bedrag">Enter either this one or &#x60;Periodes&#x60;.</param>
        /// <param name="periodes">Enter either this one or &#x60;Bedrag&#x60;.</param>
        /// <param name="startdatum">Defaults to today plus a configured amount of days..</param>
        /// <param name="iPadres">When entered the payment plan will get the source &#x60;WEB&#x60;.</param>
        /// <param name="telnr">When entered the payment plan will get the source &#x60;CEN&#x60;.</param>
        /// <param name="rekeningId">Not in use.</param>
        /// <param name="overrideChecks">This disables all checks on the input data. (default to false).</param>
        public TagorServiceSavePaymentPlanRequestRequest(string tDOSId = default(string), string tPARId = default(string), decimal bedrag = default(decimal), decimal periodes = default(decimal), DateOnly startdatum = default(DateOnly), string iPadres = default(string), string telnr = default(string), string rekeningId = default(string), bool overrideChecks = false)
        {
            // to ensure "tDOSId" is required (not null)
            if (tDOSId == null)
            {
                throw new ArgumentNullException("tDOSId is a required property for TagorServiceSavePaymentPlanRequestRequest and cannot be null");
            }
            this.TDOSId = tDOSId;
            this.TPARId = tPARId;
            this.Bedrag = bedrag;
            this.Periodes = periodes;
            this.Startdatum = startdatum;
            this.IPadres = iPadres;
            this.Telnr = telnr;
            this.RekeningId = rekeningId;
            this.OverrideChecks = overrideChecks;
        }

        /// <summary>
        /// Id of the file you want to create a payment plan on. This field is not required when using the &#x60;Code&#x60; authentication. In this case this endpoint will always only use the file linked to the code.
        /// </summary>
        /// <value>Id of the file you want to create a payment plan on. This field is not required when using the &#x60;Code&#x60; authentication. In this case this endpoint will always only use the file linked to the code.</value>
        [DataMember(Name = "TDOS_Id", IsRequired = true, EmitDefaultValue = true)]
        public string TDOSId { get; set; }

        /// <summary>
        /// The party to link with the payment plan
        /// </summary>
        /// <value>The party to link with the payment plan</value>
        [DataMember(Name = "TPAR_Id", EmitDefaultValue = false)]
        public string TPARId { get; set; }

        /// <summary>
        /// Enter either this one or &#x60;Periodes&#x60;
        /// </summary>
        /// <value>Enter either this one or &#x60;Periodes&#x60;</value>
        [DataMember(Name = "Bedrag", EmitDefaultValue = false)]
        public decimal Bedrag { get; set; }

        /// <summary>
        /// Enter either this one or &#x60;Bedrag&#x60;
        /// </summary>
        /// <value>Enter either this one or &#x60;Bedrag&#x60;</value>
        [DataMember(Name = "Periodes", EmitDefaultValue = false)]
        public decimal Periodes { get; set; }

        /// <summary>
        /// Defaults to today plus a configured amount of days.
        /// </summary>
        /// <value>Defaults to today plus a configured amount of days.</value>
        [DataMember(Name = "Startdatum", EmitDefaultValue = false)]
        public DateOnly Startdatum { get; set; }

        /// <summary>
        /// When entered the payment plan will get the source &#x60;WEB&#x60;
        /// </summary>
        /// <value>When entered the payment plan will get the source &#x60;WEB&#x60;</value>
        [DataMember(Name = "IPadres", EmitDefaultValue = false)]
        public string IPadres { get; set; }

        /// <summary>
        /// When entered the payment plan will get the source &#x60;CEN&#x60;
        /// </summary>
        /// <value>When entered the payment plan will get the source &#x60;CEN&#x60;</value>
        [DataMember(Name = "Telnr", EmitDefaultValue = false)]
        public string Telnr { get; set; }

        /// <summary>
        /// Not in use
        /// </summary>
        /// <value>Not in use</value>
        [DataMember(Name = "RekeningId", EmitDefaultValue = false)]
        public string RekeningId { get; set; }

        /// <summary>
        /// This disables all checks on the input data.
        /// </summary>
        /// <value>This disables all checks on the input data.</value>
        [DataMember(Name = "OverrideChecks", EmitDefaultValue = true)]
        public bool OverrideChecks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TagorServiceSavePaymentPlanRequestRequest {\n");
            sb.Append("  TDOSId: ").Append(TDOSId).Append("\n");
            sb.Append("  TPARId: ").Append(TPARId).Append("\n");
            sb.Append("  Bedrag: ").Append(Bedrag).Append("\n");
            sb.Append("  Periodes: ").Append(Periodes).Append("\n");
            sb.Append("  Startdatum: ").Append(Startdatum).Append("\n");
            sb.Append("  IPadres: ").Append(IPadres).Append("\n");
            sb.Append("  Telnr: ").Append(Telnr).Append("\n");
            sb.Append("  RekeningId: ").Append(RekeningId).Append("\n");
            sb.Append("  OverrideChecks: ").Append(OverrideChecks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
