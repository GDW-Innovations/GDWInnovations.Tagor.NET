/*
 * Tagor API
 *
 * Release date: 29/09/2022  ## REQUIREMENTS This version __requires__ Tagor >= 2.00.0000B0. Use [`Config/Info`](#operation/ConfigInfo) to get the active API version.  ## CHANGELOG - New [`Dossier/CreateAgenda`](#operation/DossierCreateAgenda) endpoint. - New return values in GetAgenda 'TJOB_Id, TJOBM_Id, TUSER_Id, Manueel and IsGeblokkeerd' - In CreateLine you can now add if the line is fixed with 'IsFixed' - In CreateLine you can now add a subarray with the intrests  ## INFO - Using the download button at the top you can import this collection of endpoints in **Postman** - In general all TQ(...)_Id fields are default fields which you can translate with the [`Code/GetDescription`](#operation/CodeGetDescription) endpoint. If you need an id to post to one of the endpoints you can use the [`Code/GetList`](#operation/CodeGetList) endpoint to get all possible values or [`Code/GetDescription`](#operation/CodeGetDescription) to get a value by code. These id's will be marked as `code id` in the documentation. - We chose to return all ids as string because these are 64bit integers which are too big for javascript to handle. - All italic text below the endpoint description is meant for people with access to Tagor. - The user needs an email address configured in Tagor for the services to work properly. - Pass the `Accept` header with `application/json` as value to have the server return errors in json format. - Most endpoints can be batched/paged by passing a `BATCH-SIZE` and `BATCH-NUMBER` record in `dsWebContext`.  # AUTHENTICATION Pass your token via an `Authorization` header like this: `Authorization: {bearer_format} {token}`.  ex: `Authorization: TGR IcoQbVw7wE...PPUPda61ET` <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2.00.0000B1
 * Contact: info@organi.be
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GDWInnovations.TagorClient.Client.OpenAPIDateConverter;

namespace GDWInnovations.TagorClient.Model
{
    /// <summary>
    /// DsTCOMWebDsTCOMWebTtTCOMWebInner
    /// </summary>
    [DataContract(Name = "dsTCOMWeb_dsTCOMWeb_ttTCOMWeb_inner")]
    public partial class DsTCOMWebDsTCOMWebTtTCOMWebInner : IValidatableObject
    {
        /// <summary>
        /// Defines OwningEntity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OwningEntityEnum
        {
            /// <summary>
            /// Enum TPAR for value: TPAR
            /// </summary>
            [EnumMember(Value = "TPAR")]
            TPAR = 1
        }


        /// <summary>
        /// Gets or Sets OwningEntity
        /// </summary>
        [DataMember(Name = "owning_entity", EmitDefaultValue = false)]
        public OwningEntityEnum? OwningEntity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DsTCOMWebDsTCOMWebTtTCOMWebInner" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="comment">comment.</param>
        /// <param name="content">content.</param>
        /// <param name="owningEntity">owningEntity.</param>
        /// <param name="owningId">owningId.</param>
        /// <param name="typeId">A code id from the &#x60;TQCOM&#x60; table..</param>
        /// <param name="used">used.</param>
        /// <param name="billing">billing.</param>
        /// <param name="mailInSeries">mailInSeries.</param>
        public DsTCOMWebDsTCOMWebTtTCOMWebInner(string id = default(string), string comment = default(string), string content = default(string), OwningEntityEnum? owningEntity = default(OwningEntityEnum?), string owningId = default(string), string typeId = default(string), bool used = default(bool), bool billing = default(bool), bool mailInSeries = default(bool))
        {
            this.Id = id;
            this.Comment = comment;
            this.Content = content;
            this.OwningEntity = owningEntity;
            this.OwningId = owningId;
            this.TypeId = typeId;
            this.Used = used;
            this.Billing = billing;
            this.MailInSeries = mailInSeries;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets OwningId
        /// </summary>
        [DataMember(Name = "owning_id", EmitDefaultValue = false)]
        public string OwningId { get; set; }

        /// <summary>
        /// A code id from the &#x60;TQCOM&#x60; table.
        /// </summary>
        /// <value>A code id from the &#x60;TQCOM&#x60; table.</value>
        [DataMember(Name = "type_id", EmitDefaultValue = false)]
        public string TypeId { get; set; }

        /// <summary>
        /// Gets or Sets Used
        /// </summary>
        [DataMember(Name = "used", EmitDefaultValue = true)]
        public bool Used { get; set; }

        /// <summary>
        /// Gets or Sets Billing
        /// </summary>
        [DataMember(Name = "billing", EmitDefaultValue = true)]
        public bool Billing { get; set; }

        /// <summary>
        /// Gets or Sets MailInSeries
        /// </summary>
        [DataMember(Name = "mail_in_series", EmitDefaultValue = true)]
        public bool MailInSeries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DsTCOMWebDsTCOMWebTtTCOMWebInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  OwningEntity: ").Append(OwningEntity).Append("\n");
            sb.Append("  OwningId: ").Append(OwningId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  Used: ").Append(Used).Append("\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("  MailInSeries: ").Append(MailInSeries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
