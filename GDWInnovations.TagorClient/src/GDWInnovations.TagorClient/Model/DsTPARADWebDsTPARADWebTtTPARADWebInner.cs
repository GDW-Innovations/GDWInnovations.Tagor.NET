/*
 * Tagor API
 *
 * Release date: 29/09/2022  ## REQUIREMENTS This version __requires__ Tagor >= 2.00.0000B0. Use [`Config/Info`](#operation/ConfigInfo) to get the active API version.  ## CHANGELOG - New [`Dossier/CreateAgenda`](#operation/DossierCreateAgenda) endpoint. - New return values in GetAgenda 'TJOB_Id, TJOBM_Id, TUSER_Id, Manueel and IsGeblokkeerd' - In CreateLine you can now add if the line is fixed with 'IsFixed' - In CreateLine you can now add a subarray with the intrests  ## INFO - Using the download button at the top you can import this collection of endpoints in **Postman** - In general all TQ(...)_Id fields are default fields which you can translate with the [`Code/GetDescription`](#operation/CodeGetDescription) endpoint. If you need an id to post to one of the endpoints you can use the [`Code/GetList`](#operation/CodeGetList) endpoint to get all possible values or [`Code/GetDescription`](#operation/CodeGetDescription) to get a value by code. These id's will be marked as `code id` in the documentation. - We chose to return all ids as string because these are 64bit integers which are too big for javascript to handle. - All italic text below the endpoint description is meant for people with access to Tagor. - The user needs an email address configured in Tagor for the services to work properly. - Pass the `Accept` header with `application/json` as value to have the server return errors in json format. - Most endpoints can be batched/paged by passing a `BATCH-SIZE` and `BATCH-NUMBER` record in `dsWebContext`.  # AUTHENTICATION Pass your token via an `Authorization` header like this: `Authorization: {bearer_format} {token}`.  ex: `Authorization: TGR IcoQbVw7wE...PPUPda61ET` <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2.00.0000B1
 * Contact: info@organi.be
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GDWInnovations.TagorClient.Client.OpenAPIDateConverter;

namespace GDWInnovations.TagorClient.Model
{
    /// <summary>
    /// DsTPARADWebDsTPARADWebTtTPARADWebInner
    /// </summary>
    [DataContract(Name = "dsTPARADWeb_dsTPARADWeb_ttTPARADWeb_inner")]
    public partial class DsTPARADWebDsTPARADWebTtTPARADWebInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DsTPARADWebDsTPARADWebTtTPARADWebInner" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="partyId">partyId.</param>
        /// <param name="typeId">A code id from the &#x60;TQAD&#x60; table..</param>
        /// <param name="street">street.</param>
        /// <param name="streetTypeId">A code id from the &#x60;TQSTRAAT&#x60; table..</param>
        /// <param name="number">number.</param>
        /// <param name="mailbox">mailbox.</param>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="postalCodeTypeId">A code id from the &#x60;TQPOST&#x60; table..</param>
        /// <param name="city">city.</param>
        /// <param name="cityTypeId">A code id from the &#x60;TQPLAATS&#x60; table..</param>
        /// <param name="country">country.</param>
        /// <param name="countryTypeId">A code id from the &#x60;TQLAND&#x60; table..</param>
        /// <param name="currentAddress">currentAddress.</param>
        public DsTPARADWebDsTPARADWebTtTPARADWebInner(string id = default(string), string partyId = default(string), string typeId = default(string), string street = default(string), string streetTypeId = default(string), string number = default(string), string mailbox = default(string), string postalCode = default(string), string postalCodeTypeId = default(string), string city = default(string), string cityTypeId = default(string), string country = default(string), string countryTypeId = default(string), bool currentAddress = default(bool))
        {
            this.Id = id;
            this.PartyId = partyId;
            this.TypeId = typeId;
            this.Street = street;
            this.StreetTypeId = streetTypeId;
            this.Number = number;
            this.Mailbox = mailbox;
            this.PostalCode = postalCode;
            this.PostalCodeTypeId = postalCodeTypeId;
            this.City = city;
            this.CityTypeId = cityTypeId;
            this.Country = country;
            this.CountryTypeId = countryTypeId;
            this.CurrentAddress = currentAddress;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PartyId
        /// </summary>
        [DataMember(Name = "party_id", EmitDefaultValue = false)]
        public string PartyId { get; set; }

        /// <summary>
        /// A code id from the &#x60;TQAD&#x60; table.
        /// </summary>
        /// <value>A code id from the &#x60;TQAD&#x60; table.</value>
        [DataMember(Name = "type_id", EmitDefaultValue = false)]
        public string TypeId { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name = "street", EmitDefaultValue = false)]
        public string Street { get; set; }

        /// <summary>
        /// A code id from the &#x60;TQSTRAAT&#x60; table.
        /// </summary>
        /// <value>A code id from the &#x60;TQSTRAAT&#x60; table.</value>
        [DataMember(Name = "street_type_id", EmitDefaultValue = false)]
        public string StreetTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Mailbox
        /// </summary>
        [DataMember(Name = "mailbox", EmitDefaultValue = false)]
        public string Mailbox { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name = "postal_code", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// A code id from the &#x60;TQPOST&#x60; table.
        /// </summary>
        /// <value>A code id from the &#x60;TQPOST&#x60; table.</value>
        [DataMember(Name = "postal_code_type_id", EmitDefaultValue = false)]
        public string PostalCodeTypeId { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// A code id from the &#x60;TQPLAATS&#x60; table.
        /// </summary>
        /// <value>A code id from the &#x60;TQPLAATS&#x60; table.</value>
        [DataMember(Name = "city_type_id", EmitDefaultValue = false)]
        public string CityTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// A code id from the &#x60;TQLAND&#x60; table.
        /// </summary>
        /// <value>A code id from the &#x60;TQLAND&#x60; table.</value>
        [DataMember(Name = "country_type_id", EmitDefaultValue = false)]
        public string CountryTypeId { get; set; }

        /// <summary>
        /// Gets or Sets CurrentAddress
        /// </summary>
        [DataMember(Name = "current_address", EmitDefaultValue = true)]
        public bool CurrentAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DsTPARADWebDsTPARADWebTtTPARADWebInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PartyId: ").Append(PartyId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  StreetTypeId: ").Append(StreetTypeId).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Mailbox: ").Append(Mailbox).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  PostalCodeTypeId: ").Append(PostalCodeTypeId).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CityTypeId: ").Append(CityTypeId).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryTypeId: ").Append(CountryTypeId).Append("\n");
            sb.Append("  CurrentAddress: ").Append(CurrentAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
