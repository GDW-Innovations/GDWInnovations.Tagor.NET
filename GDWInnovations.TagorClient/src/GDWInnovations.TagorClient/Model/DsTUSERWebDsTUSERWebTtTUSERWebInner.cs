/*
 * Tagor API
 *
 * Release date: 29/09/2022  ## REQUIREMENTS This version __requires__ Tagor >= 2.00.0000B0. Use [`Config/Info`](#operation/ConfigInfo) to get the active API version.  ## CHANGELOG - New [`Dossier/CreateAgenda`](#operation/DossierCreateAgenda) endpoint. - New return values in GetAgenda 'TJOB_Id, TJOBM_Id, TUSER_Id, Manueel and IsGeblokkeerd' - In CreateLine you can now add if the line is fixed with 'IsFixed' - In CreateLine you can now add a subarray with the intrests  ## INFO - Using the download button at the top you can import this collection of endpoints in **Postman** - In general all TQ(...)_Id fields are default fields which you can translate with the [`Code/GetDescription`](#operation/CodeGetDescription) endpoint. If you need an id to post to one of the endpoints you can use the [`Code/GetList`](#operation/CodeGetList) endpoint to get all possible values or [`Code/GetDescription`](#operation/CodeGetDescription) to get a value by code. These id's will be marked as `code id` in the documentation. - We chose to return all ids as string because these are 64bit integers which are too big for javascript to handle. - All italic text below the endpoint description is meant for people with access to Tagor. - The user needs an email address configured in Tagor for the services to work properly. - Pass the `Accept` header with `application/json` as value to have the server return errors in json format. - Most endpoints can be batched/paged by passing a `BATCH-SIZE` and `BATCH-NUMBER` record in `dsWebContext`.  # AUTHENTICATION Pass your token via an `Authorization` header like this: `Authorization: {bearer_format} {token}`.  ex: `Authorization: TGR IcoQbVw7wE...PPUPda61ET` <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2.00.0000B1
 * Contact: info@organi.be
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GDWInnovations.TagorClient.Client.OpenAPIDateConverter;

namespace GDWInnovations.TagorClient.Model
{
    /// <summary>
    /// DsTUSERWebDsTUSERWebTtTUSERWebInner
    /// </summary>
    [DataContract(Name = "dsTUSERWeb_dsTUSERWeb_ttTUSERWeb_inner")]
    public partial class DsTUSERWebDsTUSERWebTtTUSERWebInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DsTUSERWebDsTUSERWebTtTUSERWebInner" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="partyId">Id of the party (TPAR) record..</param>
        /// <param name="username">username.</param>
        /// <param name="name">name.</param>
        /// <param name="password">password.</param>
        /// <param name="landline">landline.</param>
        /// <param name="fax">fax.</param>
        /// <param name="cellphone">cellphone.</param>
        /// <param name="emailAddress">emailAddress.</param>
        /// <param name="requires2fa">requires2fa.</param>
        public DsTUSERWebDsTUSERWebTtTUSERWebInner(string id = default(string), string partyId = default(string), string username = default(string), string name = default(string), string password = default(string), string landline = default(string), string fax = default(string), string cellphone = default(string), string emailAddress = default(string), bool requires2fa = default(bool))
        {
            this.Id = id;
            this.PartyId = partyId;
            this.Username = username;
            this.Name = name;
            this.Password = password;
            this.Landline = landline;
            this.Fax = fax;
            this.Cellphone = cellphone;
            this.EmailAddress = emailAddress;
            this.Requires2fa = requires2fa;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Id of the party (TPAR) record.
        /// </summary>
        /// <value>Id of the party (TPAR) record.</value>
        [DataMember(Name = "party_id", EmitDefaultValue = false)]
        public string PartyId { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Landline
        /// </summary>
        [DataMember(Name = "landline", EmitDefaultValue = false)]
        public string Landline { get; set; }

        /// <summary>
        /// Gets or Sets Fax
        /// </summary>
        [DataMember(Name = "fax", EmitDefaultValue = false)]
        public string Fax { get; set; }

        /// <summary>
        /// Gets or Sets Cellphone
        /// </summary>
        [DataMember(Name = "cellphone", EmitDefaultValue = false)]
        public string Cellphone { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name = "email_address", EmitDefaultValue = false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets Requires2fa
        /// </summary>
        [DataMember(Name = "requires_2fa", EmitDefaultValue = true)]
        public bool Requires2fa { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DsTUSERWebDsTUSERWebTtTUSERWebInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PartyId: ").Append(PartyId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Landline: ").Append(Landline).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Cellphone: ").Append(Cellphone).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Requires2fa: ").Append(Requires2fa).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
