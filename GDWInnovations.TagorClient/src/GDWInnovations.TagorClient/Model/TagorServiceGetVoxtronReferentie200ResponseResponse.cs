/*
 * Tagor API
 *
 * Release date: 29/09/2022  ## REQUIREMENTS This version __requires__ Tagor >= 2.00.0000B0. Use [`Config/Info`](#operation/ConfigInfo) to get the active API version.  ## CHANGELOG - New [`Dossier/CreateAgenda`](#operation/DossierCreateAgenda) endpoint. - New return values in GetAgenda 'TJOB_Id, TJOBM_Id, TUSER_Id, Manueel and IsGeblokkeerd' - In CreateLine you can now add if the line is fixed with 'IsFixed' - In CreateLine you can now add a subarray with the intrests  ## INFO - Using the download button at the top you can import this collection of endpoints in **Postman** - In general all TQ(...)_Id fields are default fields which you can translate with the [`Code/GetDescription`](#operation/CodeGetDescription) endpoint. If you need an id to post to one of the endpoints you can use the [`Code/GetList`](#operation/CodeGetList) endpoint to get all possible values or [`Code/GetDescription`](#operation/CodeGetDescription) to get a value by code. These id's will be marked as `code id` in the documentation. - We chose to return all ids as string because these are 64bit integers which are too big for javascript to handle. - All italic text below the endpoint description is meant for people with access to Tagor. - The user needs an email address configured in Tagor for the services to work properly. - Pass the `Accept` header with `application/json` as value to have the server return errors in json format. - Most endpoints can be batched/paged by passing a `BATCH-SIZE` and `BATCH-NUMBER` record in `dsWebContext`.  # AUTHENTICATION Pass your token via an `Authorization` header like this: `Authorization: {bearer_format} {token}`.  ex: `Authorization: TGR IcoQbVw7wE...PPUPda61ET` <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2.00.0000B1
 * Contact: info@organi.be
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GDWInnovations.TagorClient.Client.OpenAPIDateConverter;

namespace GDWInnovations.TagorClient.Model
{
    /// <summary>
    /// TagorServiceGetVoxtronReferentie200ResponseResponse
    /// </summary>
    [DataContract(Name = "TagorServiceGetVoxtronReferentie_200_response_response")]
    public partial class TagorServiceGetVoxtronReferentie200ResponseResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TagorServiceGetVoxtronReferentie200ResponseResponse" /> class.
        /// </summary>
        /// <param name="success">success.</param>
        /// <param name="error">error.</param>
        /// <param name="dosSoortId">This field will contain the file type. If a mapping with code &#x60;VOXTRON&#x60; is found in tagor, the id will converted. Otherwise &#x60;DSO + {filetype_id}&#x60; will be returned..</param>
        /// <param name="dosBehId">This field can contain the &#x60;file name&#x60;, the &#x60;file admin&#39;s username&#x60; or  &#x60;&#39;DBH&#39; + the file admin&#39;s user id&#x60;.</param>
        /// <param name="dosStatus">This field will contain the file status or file stage status. If a mapping with code &#x60;VOXTRON&#x60; is found in tagor, the id will converted. Otherwise &#x60;DSO + {status_id}&#x60; will be returned..</param>
        /// <param name="aantalVerw">Amount of defendants on a file..</param>
        /// <param name="volgNrVerw">Index number of the defendant..</param>
        /// <param name="dosId">dosId.</param>
        /// <param name="dagvaarding">Indicate if there&#39;s been a subpoena..</param>
        /// <param name="returnCode">- &#x60;0&#x60;: Success - &#x60;-1&#x60;: Unknown file or wrong index number passed in &#x60;Referentie&#x60;. - &#x60;-2&#x60;: Multiple files found..</param>
        public TagorServiceGetVoxtronReferentie200ResponseResponse(bool success = default(bool), string error = default(string), string dosSoortId = default(string), string dosBehId = default(string), string dosStatus = default(string), int aantalVerw = default(int), int volgNrVerw = default(int), string dosId = default(string), bool dagvaarding = default(bool), string returnCode = default(string))
        {
            this.Success = success;
            this.Error = error;
            this.DosSoortId = dosSoortId;
            this.DosBehId = dosBehId;
            this.DosStatus = dosStatus;
            this.AantalVerw = aantalVerw;
            this.VolgNrVerw = volgNrVerw;
            this.DosId = dosId;
            this.Dagvaarding = dagvaarding;
            this.ReturnCode = returnCode;
        }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "Success", EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "Error", EmitDefaultValue = false)]
        public string Error { get; set; }

        /// <summary>
        /// This field will contain the file type. If a mapping with code &#x60;VOXTRON&#x60; is found in tagor, the id will converted. Otherwise &#x60;DSO + {filetype_id}&#x60; will be returned.
        /// </summary>
        /// <value>This field will contain the file type. If a mapping with code &#x60;VOXTRON&#x60; is found in tagor, the id will converted. Otherwise &#x60;DSO + {filetype_id}&#x60; will be returned.</value>
        [DataMember(Name = "DosSoortId", EmitDefaultValue = false)]
        public string DosSoortId { get; set; }

        /// <summary>
        /// This field can contain the &#x60;file name&#x60;, the &#x60;file admin&#39;s username&#x60; or  &#x60;&#39;DBH&#39; + the file admin&#39;s user id&#x60;
        /// </summary>
        /// <value>This field can contain the &#x60;file name&#x60;, the &#x60;file admin&#39;s username&#x60; or  &#x60;&#39;DBH&#39; + the file admin&#39;s user id&#x60;</value>
        [DataMember(Name = "DosBehId", EmitDefaultValue = false)]
        public string DosBehId { get; set; }

        /// <summary>
        /// This field will contain the file status or file stage status. If a mapping with code &#x60;VOXTRON&#x60; is found in tagor, the id will converted. Otherwise &#x60;DSO + {status_id}&#x60; will be returned.
        /// </summary>
        /// <value>This field will contain the file status or file stage status. If a mapping with code &#x60;VOXTRON&#x60; is found in tagor, the id will converted. Otherwise &#x60;DSO + {status_id}&#x60; will be returned.</value>
        [DataMember(Name = "DosStatus", EmitDefaultValue = false)]
        public string DosStatus { get; set; }

        /// <summary>
        /// Amount of defendants on a file.
        /// </summary>
        /// <value>Amount of defendants on a file.</value>
        [DataMember(Name = "AantalVerw", EmitDefaultValue = false)]
        public int AantalVerw { get; set; }

        /// <summary>
        /// Index number of the defendant.
        /// </summary>
        /// <value>Index number of the defendant.</value>
        [DataMember(Name = "VolgNrVerw", EmitDefaultValue = false)]
        public int VolgNrVerw { get; set; }

        /// <summary>
        /// Gets or Sets DosId
        /// </summary>
        [DataMember(Name = "DosId", EmitDefaultValue = false)]
        public string DosId { get; set; }

        /// <summary>
        /// Indicate if there&#39;s been a subpoena.
        /// </summary>
        /// <value>Indicate if there&#39;s been a subpoena.</value>
        [DataMember(Name = "Dagvaarding", EmitDefaultValue = true)]
        public bool Dagvaarding { get; set; }

        /// <summary>
        /// - &#x60;0&#x60;: Success - &#x60;-1&#x60;: Unknown file or wrong index number passed in &#x60;Referentie&#x60;. - &#x60;-2&#x60;: Multiple files found.
        /// </summary>
        /// <value>- &#x60;0&#x60;: Success - &#x60;-1&#x60;: Unknown file or wrong index number passed in &#x60;Referentie&#x60;. - &#x60;-2&#x60;: Multiple files found.</value>
        [DataMember(Name = "ReturnCode", EmitDefaultValue = false)]
        public string ReturnCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TagorServiceGetVoxtronReferentie200ResponseResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  DosSoortId: ").Append(DosSoortId).Append("\n");
            sb.Append("  DosBehId: ").Append(DosBehId).Append("\n");
            sb.Append("  DosStatus: ").Append(DosStatus).Append("\n");
            sb.Append("  AantalVerw: ").Append(AantalVerw).Append("\n");
            sb.Append("  VolgNrVerw: ").Append(VolgNrVerw).Append("\n");
            sb.Append("  DosId: ").Append(DosId).Append("\n");
            sb.Append("  Dagvaarding: ").Append(Dagvaarding).Append("\n");
            sb.Append("  ReturnCode: ").Append(ReturnCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
