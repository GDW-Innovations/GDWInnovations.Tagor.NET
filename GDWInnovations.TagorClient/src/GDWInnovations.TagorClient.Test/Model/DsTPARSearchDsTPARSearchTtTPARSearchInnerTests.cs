/*
 * Tagor API
 *
 * Release date: 29/09/2022  ## REQUIREMENTS This version __requires__ Tagor >= 2.00.0000B0. Use [`Config/Info`](#operation/ConfigInfo) to get the active API version.  ## CHANGELOG - New [`Dossier/CreateAgenda`](#operation/DossierCreateAgenda) endpoint. - New return values in GetAgenda 'TJOB_Id, TJOBM_Id, TUSER_Id, Manueel and IsGeblokkeerd' - In CreateLine you can now add if the line is fixed with 'IsFixed' - In CreateLine you can now add a subarray with the intrests  ## INFO - Using the download button at the top you can import this collection of endpoints in **Postman** - In general all TQ(...)_Id fields are default fields which you can translate with the [`Code/GetDescription`](#operation/CodeGetDescription) endpoint. If you need an id to post to one of the endpoints you can use the [`Code/GetList`](#operation/CodeGetList) endpoint to get all possible values or [`Code/GetDescription`](#operation/CodeGetDescription) to get a value by code. These id's will be marked as `code id` in the documentation. - We chose to return all ids as string because these are 64bit integers which are too big for javascript to handle. - All italic text below the endpoint description is meant for people with access to Tagor. - The user needs an email address configured in Tagor for the services to work properly. - Pass the `Accept` header with `application/json` as value to have the server return errors in json format. - Most endpoints can be batched/paged by passing a `BATCH-SIZE` and `BATCH-NUMBER` record in `dsWebContext`.  # AUTHENTICATION Pass your token via an `Authorization` header like this: `Authorization: {bearer_format} {token}`.  ex: `Authorization: TGR IcoQbVw7wE...PPUPda61ET` <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2.00.0000B1
 * Contact: info@organi.be
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using GDWInnovations.TagorClient.Model;
using GDWInnovations.TagorClient.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace GDWInnovations.TagorClient.Test.Model
{
    /// <summary>
    ///  Class for testing DsTPARSearchDsTPARSearchTtTPARSearchInner
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class DsTPARSearchDsTPARSearchTtTPARSearchInnerTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for DsTPARSearchDsTPARSearchTtTPARSearchInner
        //private DsTPARSearchDsTPARSearchTtTPARSearchInner instance;

        public DsTPARSearchDsTPARSearchTtTPARSearchInnerTests()
        {
            // TODO uncomment below to create an instance of DsTPARSearchDsTPARSearchTtTPARSearchInner
            //instance = new DsTPARSearchDsTPARSearchTtTPARSearchInner();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DsTPARSearchDsTPARSearchTtTPARSearchInner
        /// </summary>
        [Fact]
        public void DsTPARSearchDsTPARSearchTtTPARSearchInnerInstanceTest()
        {
            // TODO uncomment below to test "IsType" DsTPARSearchDsTPARSearchTtTPARSearchInner
            //Assert.IsType<DsTPARSearchDsTPARSearchTtTPARSearchInner>(instance);
        }

        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }

        /// <summary>
        /// Test the property 'FirstName'
        /// </summary>
        [Fact]
        public void FirstNameTest()
        {
            // TODO unit test for the property 'FirstName'
        }

        /// <summary>
        /// Test the property 'LastName'
        /// </summary>
        [Fact]
        public void LastNameTest()
        {
            // TODO unit test for the property 'LastName'
        }
    }
}
